import { ElementRef, Renderer2 } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
/**
 * The accessor for writing an iso-formatted string and listening to changes on a date input element.
 *
 *  ### Example
 *  `<input type="date" name="myBirthday" ngModel useValueAsLocalIso>`
 *
 * See also:
 * What is the correct way to set and get HTMLInputElement.valueAsDate using local Dates?
 * https://stackoverflow.com/a/53033442
 */
export declare class LocalIsoDateValueAccessor implements ControlValueAccessor {
    private renderer;
    private elementRef;
    onInput: (date?: Date) => void;
    onChange: any;
    onTouched: () => void;
    constructor(renderer: Renderer2, elementRef: ElementRef);
    writeValue(isoString?: string): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<LocalIsoDateValueAccessor, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<LocalIsoDateValueAccessor, "[useValueAsLocalIso]", never, {}, {}, never, never, true>;
}
